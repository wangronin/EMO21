subfolders <- dir(file.path(data.src, folder), no.. = T)
for (subfolder in subfolders) {
funcId <- gsub('(\\d+).*', '\\1', subfolder)
method <- gsub('.*conv_(.*)', '\\1', subfolder)
lst <- sapply(list.files(file.path(data.src, folder, subfolder), full.names = T),
function (file) {
fread(file)$V1 %>%
list %>%
set_names(c(sub(pattern = "(.*)\\..*$", replacement = "\\1", basename(file))))
}, USE.NAMES = F)
L <- sapply(lst, length)
maxL <- max(L)
for (i in which(L < maxL)) {
lst[[i]] <- c(lst[[i]], rep(NA, maxL - L[i]))
}
dt_ <- cbind.data.frame(lst)
dt_ <- dt_[(DoE.size[[dim]] - 1):nrow(dt_), ]
dt_ <- dt_ - ftarget[funcId]
set_colnames(dt_, names(lst))
dt_$method <- method
dt_$dim <- dim
dt_$funcId <- paste0('F', funcId)
dt_$iter <- seq(nrow(dt_))
dt <- rbind(dt, dt_)
}
}
dt[method == 'noPCA', method := 'BO']
dt[method == 'PCA', method := 'PCA-BO']
dt <- melt(dt, id.vars = c('funcId', 'dim', 'iter', 'method'),
variable.name = 'run',
value.name = 'precison')
dt_avg <- dt[, .(median = median(precison, na.rm = T), mean = mean(precison, na.rm = T), se = sd(precison, na.rm = T) / sqrt(length(precison))), .(iter, method, funcId, dim)]
.dim <- '20D'
dt_avg[dim == .dim]
dt_avg[dim == .dim & funcId == 'F15']
dt <- dt_avg[dim == .dim & funcId == 'F15' & method == 'PCA-BO']
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim)))+
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim)))+
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
dt
dt[, mean := 0.13* (mean - min(mean)) / (max(mean) - min(mean)) + 0.13]
dt[, mean := 0.13* (median - min(median)) / (max(median) - min(median)) + 0.13]
dt[, mean := 0.13* (se - min(se)) / (max(se) - min(se)) + 0.13]
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R')+
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R')+
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
dt <- dt_avg[dim == .dim & funcId == 'F15' & method == 'PCA-BO']
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R')+
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(labels = paste0(seq(15, 30, by = 3), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
paste0(seq(15, 30, by = 3), '%')
paste0(seq(15, 30, by = 4), '%')
paste0(seq(15, 30, by = 5), '%')
paste0(seq(10, 30, by = 5), '%')
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
# scale_y_continuous(labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(breaks = seq(400, 800, by = 100)) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt, aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(breaks = seq(400, 800, by = 100), labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt[iter <= 50], aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(breaks = seq(400, 800, by = 100), labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = guide_legend(title = NULL, nrow = 1, byrow = TRUE),
colour = guide_legend(title = NULL, nrow = 1, byrow = TRUE)) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt[iter <= 30], aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(breaks = seq(400, 800, by = 100), labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = NA,
colour = NA) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p <- ggplot(dt[iter <= 30], aes(iter, mean)) +
geom_line(aes(group = method, colour = method), size = 1.3) +
geom_ribbon(aes(ymin = mean - 1.96 * se, ymax = mean + 1.96 * se, fill = method), alpha = 0.19) +
# labs(x = 'iteration', y = TeX(paste('$f - f^*$ in', .dim))) +
labs(x = 'iteration', y = 'Gage R & R') +
scale_y_continuous(breaks = seq(400, 800, by = 100), labels = paste0(seq(10, 30, by = 5), '%')) +
# facet_wrap(~ funcId, nrow = 2, scales = "free_y") +
# scale_y_log10() +
guides(fill = FALSE,
colour = FALSE) +
theme(axis.text.x = element_text(size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
ggsave('GRR.pdf', plot = p, width = 550, height = 450, dpi = 100, units = 'mm')
getwd()
update.packages(ask = F)
update.packages(ask = F)
update.packages(ask = F)
update.packages(ask = F)
?mapply
mapply(rep, 1:4, 4:1)
update.packages(ask = F)
update.packages(ask = F)
library(lhs)
update.packages(ask = F)
r
sample.int(10, 2)
sample.int(10, 2)
sample.int(10, 2)
r
r
31 - 5
26 /20
update.packages(ask =F)
8.125032492e+01 - 7.948000000000e+01
7.948000000000e+01 + 1e-8
1e4 * 16
library(IOHanalyzer)
runServer()
t <- seq(15)
t
1- 1 / (t + sqrt(2)) ^ 2
0.8284271 * 2 / 5
runServer()
getewd()
getwd()
setwd('~/code_base/EMO21/')
ls
library(ggplot2)
library(magrittr)
library(reshape2)
library(data.table)
setwd('~/code_base/EMO21/')
# plot settings
t <- theme_grey() +
theme(text = element_text(size = 38),
plot.title = element_text(hjust = 0.5),
legend.position = 'bottom',
legend.key.size = unit(2, "line"))
theme_set(t)
dt <- fread('indicators2.csv')
dt
dt[Indicator == 1]
dt[Indicator == 2]
dt[Indicator == 3]
dt <- fread('indicators2.csv')[
Indicator != 1
]
dt
dcast(dt, Algorithm + Problem + Exp + obj + Indicator ~ .)
dcast(dt, Algorithm + Problem + Exp + obj + Indicator ~ Value)
?dcast
DT <- melt(as.data.table(ChickWeight), id=2:4)
DT
dcast(DT, diet+chick ~ time)
dcast(DT, time ~ variable)
dcast(DT, Diet+Chick ~ Time)
dt
dcast(dt, Algorithm + Problem + Exp + obj ~ Indicator)
dcast(dt, Algorithm + Problem + Exp + obj ~ Indicator, value.var = 'Value')
dt[Indicator == 2, Indicator := 'HV']
dt[Indicator == 3, Indicator := 'DeltaP']
dt
dt <- fread('indicators2.csv')[
Indicator != 1
]
dt$Indicator <- as.character(dt$Indicator)
dt
dt[Indicator == 2, Indicator := 'HV']
dt[Indicator == 3, Indicator := 'DeltaP']
dt
dt <- fread('indicators2.csv')
dt <- dt[Indicator != 1
][Indicator := as.character(Indicator)
][Indicator == 2, Indicator := 'HV'
][Indicator == 3, Indicator := 'DeltaP']
dt
dt <- fread('indicators2.csv')
dt <- dt[Indicator != 1
][Indicator := as.character(Indicator)
][Indicator == '2', Indicator := 'HV'
][Indicator == '3', Indicator := 'DeltaP']
dt <- fread('indicators2.csv')
dt <- dt[Indicator != 1
][Indicator := as.character(Indicator)]
dt <- fread('indicators2.csv')
dt <- dt[Indicator != 1
][, Indicator := as.character(Indicator)]
dt[Indicator == '2', Indicator := 'HV']
dt[Indicator == '3', Indicator := 'DeltaP']
dt
dt <- dcast(dt, Algorithm + Problem + Exp + obj ~ Indicator, value.var = 'Value')
dt
p <- ggplot(dt, aes(DeltaP, HV)) +
geom_point(aes(colour = Algorithm), size = 1.3) +
labs(x = 'iteration', y = 'precision') +
facet_grid(Problem ~ obj, scales = "free") +
scale_y_log10() +
guides(fill = guide_legend(nrow = 1, byrow = TRUE),
colour = guide_legend(nrow = 1, byrow = TRUE)) +
labs(title = '') +
theme(axis.text.x = element_text(angle = 0, hjust = 0, vjust = 0, size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
p
p
p <- ggplot(dt, aes(DeltaP, HV)) +
geom_point(aes(colour = Algorithm), size = 1.3) +
labs(x = 'iteration', y = 'precision') +
facet_grid(Problem ~ obj, scales = "free") +
scale_y_log10() +
guides(fill = guide_legend(nrow = 1, byrow = TRUE),
colour = guide_legend(nrow = 1, byrow = TRUE)) +
labs(title = '') +
theme(axis.text.x = element_text(angle = 0, hjust = 0, vjust = 0, size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
ggsave(file.path(fig.des, 'scatter.pdf'), plot = p, width = 200, height = 700, dpi = 100, units = 'mm')
ggsave('scatter.pdf', plot = p, width = 200, height = 700, dpi = 100, units = 'mm')
?facet_grid
p <- ggplot(dt, aes(DeltaP, HV)) +
geom_point(aes(colour = as.factor(Algorithm)), size = 1.3) +
labs(x = 'iteration', y = 'precision') +
facet_grid(Problem ~ obj, scales = "free") +
scale_y_log10() +
scale_x_log10() +
guides(fill = guide_legend(nrow = 1, byrow = TRUE),
colour = guide_legend(nrow = 1, byrow = TRUE)) +
labs(title = '') +
theme(axis.text.x = element_text(angle = 0, hjust = 0, vjust = 0, size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
ggsave('scatter.pdf', plot = p, width = 200, height = 700, dpi = 100, units = 'mm')
dt
.normalize <- function(x) (x - min(x)) / (max(x) - min(x))
dt[, HV := .normalize(HV), by = .(Problem, obj)]
dt
dt[, DeltaP := .normalize(DeltaP), by = .(Problem, obj)]
dt
p <- ggplot(dt, aes(DeltaP, HV)) +
geom_point(aes(colour = as.factor(Algorithm)), size = 1.3) +
labs(x = 'iteration', y = 'precision') +
facet_grid(Problem ~ obj, scales = "free") +
scale_y_log10() +
scale_x_log10() +
guides(fill = guide_legend(nrow = 1, byrow = TRUE),
colour = guide_legend(nrow = 1, byrow = TRUE)) +
labs(title = '') +
theme(axis.text.x = element_text(angle = 0, hjust = 0, vjust = 0, size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
ggsave('scatter.pdf', plot = p, width = 200, height = 700, dpi = 100, units = 'mm')
p <- ggplot(dt, aes(DeltaP, HV)) +
geom_point(aes(colour = as.factor(Algorithm)), size = 1.3) +
labs(x = 'iteration', y = 'precision') +
facet_grid(Problem ~ obj, scales = "free") +
# scale_y_log10() +
# scale_x_log10() +
guides(fill = guide_legend(nrow = 1, byrow = TRUE),
colour = guide_legend(nrow = 1, byrow = TRUE)) +
labs(title = '') +
theme(axis.text.x = element_text(angle = 0, hjust = 0, vjust = 0, size = 20),
axis.text.y = element_text(angle = 0, hjust = 0.5, vjust = 0.5, size = 20),
strip.text.x = element_text(size = 30),
strip.text.y = element_text(size = 30))
ggsave('scatter.pdf', plot = p, width = 400, height = 700, dpi = 100, units = 'mm')
library(latex2exp)
install.packages('mlr')
library(mlr)
install.packages(' scmamp')
install.packages('scmamp')
library(scmamp)
?friedman.test
install.packages('PMCRMR')
install.packages('PMCMR')
library(PMCMR)
install.packages('PMCMRplus')
RoundingTimes <-
matrix(c(5.40, 5.50, 5.55,
5.85, 5.70, 5.75,
5.20, 5.60, 5.50,
5.55, 5.50, 5.40,
5.90, 5.85, 5.70,
5.45, 5.55, 5.60,
5.40, 5.40, 5.35,
5.45, 5.50, 5.35,
5.25, 5.15, 5.00,
5.85, 5.80, 5.70,
5.25, 5.20, 5.10,
5.65, 5.55, 5.45,
5.60, 5.35, 5.45,
5.05, 5.00, 4.95,
5.50, 5.50, 5.40,
5.45, 5.55, 5.50,
5.55, 5.55, 5.35,
5.45, 5.50, 5.55,
5.50, 5.45, 5.25,
5.65, 5.60, 5.40,
5.70, 5.65, 5.55,
6.30, 6.30, 6.25),
nrow = 22,
byrow = TRUE,
dimnames = list(1 : 22,
c("Round Out", "Narrow Angle", "Wide Angle")))
RoundingTimes
library(PMCMRplus)
frdAllPairsNemenyiTest(y = RoundingTimes)
RoundingTimes
library(ggplot2)
library(magrittr)
library(reshape2)
library(data.table)
library(latex2exp)
library(PMCMR)
library(scmamp)
install.packages("BiocManager")
BiocManager::install("Rgraphviz")
install.packages('scmamp')
library(ggplot2)
library(magrittr)
library(reshape2)
library(data.table)
library(latex2exp)
library(PMCMR)
library(scmamp)
setwd('~/code_base/EMO21/')
# plot settings
t <- theme_grey() +
theme(text = element_text(size = 38),
plot.title = element_text(hjust = 0.5),
legend.position = 'bottom',
legend.key.size = unit(2, "line"))
theme_set(t)
dt <- fread('indicators2.csv')
dt <- dt[Indicator != 1
][, Indicator := as.character(Indicator)
][Indicator == '2', Indicator := 'HV'
][Indicator == '3', Indicator := 'DeltaP']
dt[, obj := factor(paste0(obj, 'D'), levels = paste0(unique(obj), 'D'))]
dt[, Problem := factor(paste0('F', Problem), levels = paste0('F', unique(Problem)))]
dt
dt_test <- dcast(dt, Indicator + Problem + Exp + obj ~ Algorithm, value.var = 'Value')
X <- dt_test[, -c('Indicator', 'Problem', 'Exp', 'obj')] %>% as.matrix
res <- friedman.test(X)
res
res$p.value
library(PMCMR)
postHocTest(data = X, test = 'friedman', correct = 'bergmann')
test.res <- postHocTest(data = dt_test[, -c('Indicator', 'Problem', 'Exp', 'obj')], test = 'friedman', correct = 'bergmann')
test.res
plotCD(results.matrix = test, alpha = 0.01)
plotCD(results.matrix = test.res, alpha = 0.01)
nemenyiTest(X)
a <- nemenyiTest(X)
a
a$diff.matrix
?plotCD
plotCD
update.packages(ask = F)
update.packages(ask = F)
0.95 ^ 100
1 - 0.95 ^ 100
?friedman_test
?friedman.test
30 * 24
30 * 24 * 11
2425 / 30
2425 / 30 / 24
install.packages('energy')
